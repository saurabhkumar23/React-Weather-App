{"version":3,"sources":["components/Weather.js","redux/action.js","redux/reducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","fetchWeather","state","city","trim","country","console","log","fetch","then","res","json","data","main","temp","toFixed","temp_min","temp_max","setWeather","catch","e","alert","this","setCity","setCountry","weather","className","type","placeholder","name","value","onChange","target","onClick","Component","connect","dispatch","payload","set_city","set_country","set_weather","initialState","reducer","action","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.70a3747e.chunk.js","sourcesContent":["import React, {useState,Component} from \"react\";\nimport \"./weather.css\";\nimport {connect} from 'react-redux'\nimport {set_city} from '../redux/action'\nimport {set_country} from '../redux/action'\nimport {set_weather} from '../redux/action'\n\nclass Weather extends Component {\n\n    constructor(props){\n        super(props);\n    }\n\n    fetchWeather = () => {\n        if(this.props.state.city.trim() == '' || this.props.state.country.trim() == ''){\n            alert('fill both the fields!')\n            return\n        }\n        console.log(this.props.state.city)\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.props.state.city},${this.props.state.country}&APPID=f72d3208d111d02f19aabb823be0c462`)\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(data)\n            data.main.temp = ((data.main.temp - 32) * 5/9).toFixed(2)\n            data.main.temp_min = ((data.main.temp_min - 32) * 5/9).toFixed(2)\n            data.main.temp_max = ((data.main.temp_max - 32) * 5/9).toFixed(2)\n            this.props.setWeather(data)\n        })\n        .catch((e) => alert(e))\n\t}\n\n    render() {\n\n        const {setWeather,setCity,setCountry} = this.props\n        const {city,country,weather} = this.props.state\n\n        return (\n            <div className='container'>\n                <h1>REACT WEATHER APP</h1>\n                <input  type='text'\n                        placeholder='City'\n                        name='city'\n                        value={city}\n                        onChange={(e) => setCity(e.target.value)}\n                    />\n                <input\n                        type='text'\n                        placeholder='Country'\n                        name='country'\n                        value={country}\n                        onChange={(e) => setCountry(e.target.value)}\n                    />\n                <button className='getweather' onClick={(e) => this.fetchWeather(e)}>Submit</button>\n                {\n                    weather ? \n                    <div className='display'>\n                        <div className='main-temp'>\n                            <h1>{weather.main.temp}&deg;</h1>\n                            <h5>Temperature</h5>\n                        </div>\n                        <div className='sec-temp'>\n                            <div>\n                                <h1>{weather.main.temp_min}&deg;</h1>\n                                <h5>Min. Temperature</h5>\n                            </div>\n                            <div>\n                                <h1>{weather.main.temp_max}&deg;</h1>\n                                <h5>Max. Temperature</h5>\n                            </div>\n                        </div>\n                    </div>\n                    : null\n                }\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        'setCity' : (payload) => {\n            dispatch(set_city(payload))\n        },\n        'setCountry' : (payload) => {\n            dispatch(set_country(payload))\n        },\n        'setWeather' : (payload) => {\n            dispatch(set_weather(payload))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Weather);\n","export function set_city(payload){\r\n    return {type : 'SET_CITY',payload}\r\n}\r\n\r\nexport function set_country(payload){\r\n    return {type : 'SET_COUNTRY',payload}\r\n}\r\n\r\nexport function set_weather(payload){\r\n    return {type : 'SET_WEATHER',payload}\r\n}\r\n\r\n","// all states\r\nconst initialState = {\r\n    city : '',\r\n    country : '',\r\n    weather : null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case 'SET_CITY' : return {\r\n            ...state,\r\n            city : action.payload\r\n        }\r\n        case 'SET_COUNTRY' : return {\r\n            ...state,\r\n            country : action.payload\r\n        }\r\n        case 'SET_WEATHER' : return {\r\n            ...state,\r\n            weather : action.payload\r\n        }\r\n        default : return state\r\n    }\r\n}\r\n\r\nexport default reducer","import {createStore} from 'redux'\r\nimport reducer from './reducer'\r\n\r\nconst store = createStore(reducer)\r\n\r\nexport default store","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nfunction App() {\n\treturn (\n        <Provider store={store}>\n            <div className='App'>\n                <Weather />\n            </div>\n        </Provider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}