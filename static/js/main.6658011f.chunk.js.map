{"version":3,"sources":["components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","useState","city","setCity","country","setCountry","weather","setWeather","className","type","placeholder","name","value","onChange","e","target","onClick","trim","fetch","then","res","json","data","main","temp","toFixed","temp_min","temp_max","catch","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"8RAoEeA,MAjEf,WAAoB,IAAD,EAEQC,mBAAS,IAFjB,mBAERC,EAFQ,KAEHC,EAFG,OAGcF,mBAAS,IAHvB,mBAGRG,EAHQ,KAGAC,EAHA,OAIYJ,mBAAS,MAJrB,mBAIXK,EAJW,KAIFC,EAJE,KAuBlB,OACO,yBAAKC,UAAU,aACX,iDACA,2BAAQC,KAAK,OACpBC,YAAY,OACZC,KAAK,OACUC,MAAOV,EACtBW,SAAU,SAACC,GAAD,OAAOX,EAAQW,EAAEC,OAAOH,UAE3B,2BACPH,KAAK,OACLC,YAAY,UACZC,KAAK,UACUC,MAAOR,EACtBS,SAAU,SAACC,GAAD,OAAOT,EAAWS,EAAEC,OAAOH,UAE9B,4BAAQJ,UAAU,aAAaQ,QAAS,SAACF,GA/B3B,IAAfZ,EAAKe,QAAkC,IAAlBb,EAAQa,OAIhCC,MAAM,qDAAD,OAAsDhB,EAAtD,YAA8DE,EAA9D,kBAPG,qCAQPe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHA,EAAKC,KAAKC,MAAgC,GAAvBF,EAAKC,KAAKC,KAAO,IAAQ,GAAGC,QAAQ,GACvDH,EAAKC,KAAKG,UAAwC,GAA3BJ,EAAKC,KAAKG,SAAW,IAAQ,GAAGD,QAAQ,GAC/DH,EAAKC,KAAKI,UAAwC,GAA3BL,EAAKC,KAAKI,SAAW,IAAQ,GAAGF,QAAQ,GAC/DlB,EAAWe,MAEdM,OAAM,SAACd,GAAD,OAAOe,MAAMf,MAXhBe,MAAM,2BA8BN,UAGIvB,EACA,yBAAKE,UAAU,WACX,yBAAKA,UAAU,aACX,4BAAKF,EAAQiB,KAAKC,KAAlB,QACA,4CAEJ,yBAAKhB,UAAU,YACX,6BACI,4BAAKF,EAAQiB,KAAKG,SAAlB,QACA,iDAEJ,6BACI,4BAAKpB,EAAQiB,KAAKI,SAAlB,QACA,mDAIV,OClDHG,MARf,WACC,OACC,yBAAKtB,UAAU,OACd,kBAAC,EAAD,QCKiBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6658011f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./weather.css\";\n\nfunction Weather() {\n\n    const [city,setCity] = useState('')\n    const [country,setCountry] = useState('')\n\tconst [weather, setWeather] = useState(null)\n\tconst APIKEY = \"f72d3208d111d02f19aabb823be0c462\"\n\n\tfunction fetchWeather(){\n        if(city.trim() == '' || country.trim() == ''){\n            alert('fill both the fields!')\n            return\n        }\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n        .then((res) => res.json())\n        .then((data) => {\n            data.main.temp = ((data.main.temp - 32) * 5/9).toFixed(2)\n            data.main.temp_min = ((data.main.temp_min - 32) * 5/9).toFixed(2)\n            data.main.temp_max = ((data.main.temp_max - 32) * 5/9).toFixed(2)\n            setWeather(data)\n        })\n        .catch((e) => alert(e))\n\t}\n\n\treturn (\n        <div className='container'>\n            <h1>REACT WEATHER APP</h1>\n            <input  type='text'\n\t\t\t\t\tplaceholder='City'\n\t\t\t\t\tname='city'\n                    value={city}\n\t\t\t\t\tonChange={(e) => setCity(e.target.value)}\n                />\n            <input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tplaceholder='Country'\n\t\t\t\t\tname='country'\n                    value={country}\n\t\t\t\t\tonChange={(e) => setCountry(e.target.value)}\n\t\t\t\t/>\n            <button className='getweather' onClick={(e) => fetchWeather(e)}>Submit</button>\n\n            {\n                weather ? \n                <div className='display'>\n                    <div className='main-temp'>\n                        <h1>{weather.main.temp}&deg;</h1>\n                        <h5>Temperature</h5>\n                    </div>\n                    <div className='sec-temp'>\n                        <div>\n                            <h1>{weather.main.temp_min}&deg;</h1>\n                            <h5>Min. Temperature</h5>\n                        </div>\n                        <div>\n                            <h1>{weather.main.temp_max}&deg;</h1>\n                            <h5>Max. Temperature</h5>\n                        </div>\n                    </div>\n                </div>\n                : null\n            }\n        </div>\n\t);\n}\n\nexport default Weather;\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Weather />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}